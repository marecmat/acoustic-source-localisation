import numpy as np
import matplotlib.pyplot as plt
import statistics as stat
import TDOALocalisation

# np.random.randint(-100, 100)
source_ac = (-17.5, 42.37)
capteurs = [
        (-100, 50),
        (200, -57),
        (650, 347),
        (310, -85),
        ]
header = "X_error   Y_error   Distance_error   X_relative_error   Y_relative_error"
N = 500
result = []
for t in range(0,21):
    result.append([[], [], [], [], []])
    print(t)
    for i in range(N):
        # Creating the class instance
        instance = TDOALocalisation.TDOALocalisation(source_ac, capteurs, T=15, step=0.5, max_dist=300, time_noise= t * 2000)
        # PARAB contains a list of parabola equations
        PARAB = instance.get_all_paraboloid()
        
        x_inters, y_inters, mean = instance.intersection_estimation(PARAB)
    #    print("calculated source position is at: x={:.3f}, y={:.3f}".format(mean[0], mean[1]))
    #    print("actual source is at: x={:.3f}, y={:.3f}".format(source_ac[0], source_ac[1]))
        result[t][0].append(mean[0])
        result[t][1].append(mean[1])
        result[t][2].append(np.sqrt(abs(mean[0]-source_ac[0])**2 + abs(mean[1]-source_ac[1])**2))
        result[t][3].append(abs(mean[0]-source_ac[0]/source_ac[0])*100)
        result[t][4].append(abs(mean[1]-source_ac[1]/source_ac[1])*100)

array_result = np.array(result)

for i in range(0, 21):    
    np.savetxt("./tests/Result_test_t{}.txt".format(2*i), array_result[i,:,:].T, header = header)

c = 342
t = np.linspace(0, 400e-3, 20)
mean_distance = np.zeros(20)
ecart_type = np.zeros(20)
dif = np.zeros(20)
maximum = np.zeros(20)
mini = np.zeros(20)
quantil25 = np.zeros(20)
quantil75 = np.zeros(20)
quantil95 = np.zeros(20)

for i in range(20):
    mean_distance[i] = np.mean(array_result[i, 2,:])
    ecart_type[i] = np.sqrt(stat.variance(array_result[i, 2,:]))
    dif[i] = np.max(array_result[i, 2,:]) - np.min(array_result[i, 2,:])
#    idx = (np.abs(array_result[i, 2,:] - 0.9*np.max(array_result[i, 2,:]))).argmin()
#    per[i] = array_result[i, 2,idx]
    maximum[i] = np.max(array_result[i, 2,:])
    mini[i] = np.min(array_result[i, 2,:])
    quantil25[i] = np.quantile(array_result[i, 2,:], 0.25)
    quantil75[i] = np.quantile(array_result[i, 2,:], 0.75)
    quantil95[i] = np.quantile(array_result[i, 2,:], 0.95)

fig, ax = plt.subplots(1,1)    
    
ax.plot(t, mean_distance, label = "Mean Value")
ax.plot(t, ecart_type, 'r', linewidth = 3,label = 'Standard deviation')
ax.plot(t, maximum, color = "navy", linestyle='--', label="Maximum Value")
ax.plot(t, mini, color = "navy", linestyle='--', label="Minimum Value")
ax.plot(t, quantil95, color = "purple", linestyle='--', label="Quantil 95")
ax.fill_between(t, mini, maximum, color='#ccffff')
ax.fill_between(t, quantil25, quantil75, color='#99ffff')
        
#plt.plot(t, per)

def distance(_t):
    return c*_t
def distance_1(_d):
    return _d/c

                 
ax.set_xlabel(r"$\Delta t$ (s)")
ax.set_ylabel(r'Error (m)')
secax = ax.secondary_xaxis('top', functions = (distance, distance_1))
secax.set_xlabel('Delay range (m)')
ax.legend()
ax.set_ylim(0,25)
ax.set_xlim(0, 0.4)
plt.grid()
